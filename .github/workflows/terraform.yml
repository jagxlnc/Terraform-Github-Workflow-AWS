name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Post Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  checkov-scan:
    name: 'Checkov Security Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        id: checkov
        run: |
          checkov -d . --quiet --output-file-path checkov-report.json --output json
        continue-on-error: true

      - name: Generate Checkov Report Summary
        id: checkov_summary
        if: always()
        run: |
          echo "### Checkov Security Scan Results" > checkov-summary.md
          echo "" >> checkov-summary.md
          
          if [ -f checkov-report.json ]; then
            PASSED=$(cat checkov-report.json | grep -o '"passed": [0-9]*' | awk '{sum += $2} END {print sum}')
            FAILED=$(cat checkov-report.json | grep -o '"failed": [0-9]*' | awk '{sum += $2} END {print sum}')
            SKIPPED=$(cat checkov-report.json | grep -o '"skipped": [0-9]*' | awk '{sum += $2} END {print sum}')
            
            echo "- ‚úÖ **Passed:** $PASSED" >> checkov-summary.md
            echo "- ‚ùå **Failed:** $FAILED" >> checkov-summary.md
            echo "- ‚è≠Ô∏è **Skipped:** $SKIPPED" >> checkov-summary.md
            echo "" >> checkov-summary.md
            
            if [ "$FAILED" -gt 0 ]; then
              echo "#### Failed Checks" >> checkov-summary.md
              echo "" >> checkov-summary.md
              echo "<details><summary>Show Failed Checks</summary>" >> checkov-summary.md
              echo "" >> checkov-summary.md
              
              # Extract and format failed checks
              cat checkov-report.json | jq -r '.results.failed_checks[] | "- **" + .check_id + "**: " + .check_name + " (" + .file_path + ":" + (.file_line_range[0] | tostring) + ")"' >> checkov-summary.md
              
              echo "" >> checkov-summary.md
              echo "</details>" >> checkov-summary.md
            fi
          else
            echo "‚ö†Ô∏è No Checkov report found" >> checkov-summary.md
          fi
          
          cat checkov-summary.md

      - name: Upload Checkov Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-report.json
          retention-days: 7

      - name: Post Checkov Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('checkov-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Check Checkov Status
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          if [ -f checkov-report.json ]; then
            FAILED=$(cat checkov-report.json | grep -o '"failed": [0-9]*' | awk '{sum += $2} END {print sum}')
            if [ "$FAILED" -gt 0 ] && [ "${{ github.event_name }}" == "push" ]; then
              echo "::warning::Checkov found $FAILED security issues. Review the report for details."
            fi
            
            # For workflow_dispatch, we want to fail if there are high severity issues
            if [ "$FAILED" -gt 0 ] && [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" == "prod" ]; then
              echo "::error::Checkov found $FAILED security issues. Cannot deploy to production with security issues."
              exit 1
            fi
          fi

  terraform-plan:
    name: 'Terraform Plan'
    needs: [terraform-validate, checkov-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    env:
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME || format('static-website-{0}', github.run_id) }}
      TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME || 'example.com' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Post Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìù\`${{ steps.plan.outcome == 'success' && '‚úÖ' || '‚ùå' }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    env:
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME || format('static-website-{0}', github.run_id) }}
      TF_VAR_domain_name: ${{ secrets.TF_VAR_DOMAIN_NAME || 'example.com' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Extract CloudFront Domain
        id: cloudfront
        run: |
          DOMAIN=$(terraform output -raw cloudfront_domain_name)
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT

      - name: Post Apply Results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue || context.payload.pull_request || { number: 0 };
            const isPR = !!context.payload.pull_request;
            const domain = '${{ steps.cloudfront.outputs.domain }}';
            
            const output = `#### Terraform Apply Complete ‚úÖ
            
            üåê **Website URL**: https://${domain}
            
            *Deployed by: @${{ github.actor }}, Environment: \`${{ env.TF_VAR_environment }}\`*`;
            
            if (isPR && issue.number > 0) {
              github.rest.issues.createComment({
                issue_number: issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }